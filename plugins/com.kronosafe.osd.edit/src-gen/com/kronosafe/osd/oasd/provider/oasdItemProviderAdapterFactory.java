/**
 * Copyright Krono-Safe S.A. 2018-2019. All rights reserved.
 */
package com.kronosafe.osd.oasd.provider;

import com.kronosafe.osd.oasd.util.oasdAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class oasdItemProviderAdapterFactory extends oasdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright Krono-Safe S.A. 2018-2019. All rights reserved.";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public oasdItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.SystemDescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemDescriptionItemProvider systemDescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.SystemDescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemDescriptionAdapter() {
		if (systemDescriptionItemProvider == null) {
			systemDescriptionItemProvider = new SystemDescriptionItemProvider(this);
		}

		return systemDescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.Global} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalItemProvider globalItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.Global}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalAdapter() {
		if (globalItemProvider == null) {
			globalItemProvider = new GlobalItemProvider(this);
		}

		return globalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.Code} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeItemProvider codeItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.Code}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeAdapter() {
		if (codeItemProvider == null) {
			codeItemProvider = new CodeItemProvider(this);
		}

		return codeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.BehaviorItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorItemItemProvider behaviorItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.BehaviorItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorItemAdapter() {
		if (behaviorItemItemProvider == null) {
			behaviorItemItemProvider = new BehaviorItemItemProvider(this);
		}

		return behaviorItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.FunctionItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemItemProvider functionItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.FunctionItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionItemAdapter() {
		if (functionItemItemProvider == null) {
			functionItemItemProvider = new FunctionItemItemProvider(this);
		}

		return functionItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.TypeItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemItemProvider typeItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.TypeItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeItemAdapter() {
		if (typeItemItemProvider == null) {
			typeItemItemProvider = new TypeItemItemProvider(this);
		}

		return typeItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.CommunicationItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationItemItemProvider communicationItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.CommunicationItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationItemAdapter() {
		if (communicationItemItemProvider == null) {
			communicationItemItemProvider = new CommunicationItemItemProvider(this);
		}

		return communicationItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.Source} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceItemProvider sourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.Source}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceAdapter() {
		if (sourceItemProvider == null) {
			sourceItemProvider = new SourceItemProvider(this);
		}

		return sourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.Temporal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalItemProvider temporalItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.Temporal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalAdapter() {
		if (temporalItemProvider == null) {
			temporalItemProvider = new TemporalItemProvider(this);
		}

		return temporalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.TimingConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimingConstraintItemProvider timingConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.TimingConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimingConstraintAdapter() {
		if (timingConstraintItemProvider == null) {
			timingConstraintItemProvider = new TimingConstraintItemProvider(this);
		}

		return timingConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.FunctionalChainItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalChainItemItemProvider functionalChainItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.FunctionalChainItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalChainItemAdapter() {
		if (functionalChainItemItemProvider == null) {
			functionalChainItemItemProvider = new FunctionalChainItemItemProvider(this);
		}

		return functionalChainItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.BlockSpatialConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockSpatialConstraintItemProvider blockSpatialConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.BlockSpatialConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockSpatialConstraintAdapter() {
		if (blockSpatialConstraintItemProvider == null) {
			blockSpatialConstraintItemProvider = new BlockSpatialConstraintItemProvider(this);
		}

		return blockSpatialConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.ChainSpatialConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainSpatialConstraintItemProvider chainSpatialConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.ChainSpatialConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainSpatialConstraintAdapter() {
		if (chainSpatialConstraintItemProvider == null) {
			chainSpatialConstraintItemProvider = new ChainSpatialConstraintItemProvider(this);
		}

		return chainSpatialConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.ComSpatialConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComSpatialConstraintItemProvider comSpatialConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.ComSpatialConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComSpatialConstraintAdapter() {
		if (comSpatialConstraintItemProvider == null) {
			comSpatialConstraintItemProvider = new ComSpatialConstraintItemProvider(this);
		}

		return comSpatialConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.kronosafe.osd.oasd.TimingPathItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimingPathItemItemProvider timingPathItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.kronosafe.osd.oasd.TimingPathItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimingPathItemAdapter() {
		if (timingPathItemItemProvider == null) {
			timingPathItemItemProvider = new TimingPathItemItemProvider(this);
		}

		return timingPathItemItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (systemDescriptionItemProvider != null) systemDescriptionItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (globalItemProvider != null) globalItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (codeItemProvider != null) codeItemProvider.dispose();
		if (behaviorItemItemProvider != null) behaviorItemItemProvider.dispose();
		if (functionItemItemProvider != null) functionItemItemProvider.dispose();
		if (typeItemItemProvider != null) typeItemItemProvider.dispose();
		if (communicationItemItemProvider != null) communicationItemItemProvider.dispose();
		if (sourceItemProvider != null) sourceItemProvider.dispose();
		if (temporalItemProvider != null) temporalItemProvider.dispose();
		if (timingConstraintItemProvider != null) timingConstraintItemProvider.dispose();
		if (functionalChainItemItemProvider != null) functionalChainItemItemProvider.dispose();
		if (blockSpatialConstraintItemProvider != null) blockSpatialConstraintItemProvider.dispose();
		if (chainSpatialConstraintItemProvider != null) chainSpatialConstraintItemProvider.dispose();
		if (comSpatialConstraintItemProvider != null) comSpatialConstraintItemProvider.dispose();
		if (timingPathItemItemProvider != null) timingPathItemItemProvider.dispose();
	}

}
